<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <artifactId>hua-server</artifactId>

    <parent>
        <groupId>com.hamdard.hua</groupId>
        <artifactId>hua</artifactId>
        <version>1.0.0</version>

    </parent>

    <name>hua-server</name>
    <description>The HUA server project</description>

    <!-- mvn install:install-file -Dfile=ojdbc6-11.2.0.4.jar -DgroupId=ojdbc6 
        -DartifactId=ojdbc6 -Dversion=11.2.0.4 -Dpackaging=jar -->

    <properties>
        <java.version>1.8</java.version>
        <springboot.version>1.5.2.RELEASE</springboot.version>
        <jjwt.version>0.7.0</jjwt.version>
        <springldap.version>2.3.1.RELEASE</springldap.version>
        <ojdbc.version>11.2.0.4</ojdbc.version>
        <hikaricp.version>2.6.1</hikaricp.version>
        <disruptor.version>3.3.6</disruptor.version>
        <log4jweb.version>2.8.2</log4jweb.version>
        <mysql.version>6.0.6</mysql.version>
        <jersey.multipart.version>2.25.1</jersey.multipart.version>
        <schemaspy-maven-plugin.version>1.0.4</schemaspy-maven-plugin.version>
        <maven-site-plugin.version>3.3</maven-site-plugin.version>
        <swagger2markup.version>1.3.1</swagger2markup.version>
        <swagger2markup.plugin.version>1.3.1</swagger2markup.plugin.version>
        <swagger2markup.extension.version>1.3.1</swagger2markup.extension.version>

        <asciidoctorj.version>1.5.3</asciidoctorj.version>
        <jruby.version>9.1.6.0</jruby.version>
        <postgresql.version>42.1.1</postgresql.version>
        <commons-lang.version>2.6</commons-lang.version>

        <swagger.input>${project.basedir}/../docs/swagger/hrms.yaml</swagger.input>
        <asciidoctor.input.directory>${project.basedir}/../docs/api/asciidoc</asciidoctor.input.directory>
        <generated.asciidoc.directory>${project.basedir}/../docs/api/asciidoc/generated</generated.asciidoc.directory>
        <asciidoctor.html.output.directory>${project.basedir}/../docs/api</asciidoctor.html.output.directory>
        <asciidoctor.pdf.output.directory>${project.basedir}/../docs/api</asciidoctor.pdf.output.directory>
        <schemaspy.output.directory>${project.basedir}/../docs/database</schemaspy.output.directory>

        <ldap-maven-plugin.version>1.3.2</ldap-maven-plugin.version>
        <sql-maven-plugin.version>1.5</sql-maven-plugin.version>
        <spring-boot-maven-plugin.version>1.5.4.RELEASE</spring-boot-maven-plugin.version>
        <junit.version>4.12</junit.version>
        <httpclient.version>4.5.3</httpclient.version>
        <commons.io.version>2.5</commons.io.version>
    </properties>
    <pluginRepositories>
        <pluginRepository>
            <id>jcenter-snapshots</id>
            <name>jcenter</name>
            <url>http://oss.jfrog.org/artifactory/oss-snapshot-local/</url>
        </pluginRepository>
        <pluginRepository>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <id>jcenter-releases</id>
            <name>jcenter</name>
            <url>http://jcenter.bintray.com</url>
        </pluginRepository>
        <pluginRepository>
            <id>Wakaleo Repository</id>
            <url>http://www.wakaleo.com/maven/repos/</url>
        </pluginRepository>

    </pluginRepositories>

    <dependencies>
        <dependency>
            <groupId>com.hamdard.hua</groupId>
            <artifactId>hua-gui</artifactId>
            <version>${project.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jersey</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>${jjwt.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.ldap</groupId>
            <artifactId>spring-ldap-core</artifactId>
            <version>${springldap.version}</version>
        </dependency>
        <dependency>
            <groupId>com.lmax</groupId>
            <artifactId>disruptor</artifactId>
            <version>${disruptor.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-web</artifactId>
            <version>${log4jweb.version}</version>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>${commons-lang.version}</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-multipart</artifactId>
            <version>${jersey.multipart.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${commons.io.version}</version>
        </dependency>

    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <executable>true</executable>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                        <configuration>
                            <finalName>hrms</finalName>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>


    <profiles>
        <profile>
            <id>doc</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-site-plugin</artifactId>
                        <version>${maven-site-plugin.version}</version>
                        <configuration>
                            <reportPlugins>
                                <plugin>
                                    <groupId>com.wakaleo.schemaspy</groupId>
                                    <artifactId>maven-schemaspy-plugin</artifactId>
                                    <version>${schemaspy-maven-plugin.version}</version>
                                    <configuration>
                                        <databaseType>pgsql</databaseType>
                                        <database>hrmsdb</database>
                                        <host>localhost</host>
                                        <port>5432</port>
                                        <user>hrmsapp</user>
                                        <password>hrmsapp</password>
                                        <outputDirectory>${schemaspy.output.directory}</outputDirectory>
                                        <schema>hrms</schema>
                                    </configuration>
                                </plugin>
                            </reportPlugins>
                        </configuration>
                    </plugin>
                    <!-- First, use the swagger2markup plugin to generate 
                        asciidoc -->
                    <plugin>
                        <groupId>io.github.swagger2markup</groupId>
                        <artifactId>swagger2markup-maven-plugin</artifactId>
                        <version>${swagger2markup.plugin.version}</version>
                        <dependencies>
                            <dependency>
                                <groupId>io.github.swagger2markup</groupId>
                                <artifactId>swagger2markup-import-files-ext</artifactId>
                                <version>${swagger2markup.extension.version}</version>
                            </dependency>
                            <dependency>
                                <groupId>io.github.swagger2markup</groupId>
                                <artifactId>swagger2markup</artifactId>
                                <version>${swagger2markup.version}</version>
                            </dependency>
                        </dependencies>
                        <configuration>
                            <swaggerInput>${swagger.input}</swaggerInput>
                            <outputDir>${generated.asciidoc.directory}</outputDir>
                            <config>
                                <swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>

                                <swagger2markup.basePathPrefixEnabled>true</swagger2markup.basePathPrefixEnabled>
                                <swagger2markup.extensions.dynamicOverview.contentPath>${generated.asciidoc.directory}/extensions/overview</swagger2markup.extensions.dynamicOverview.contentPath>
                                <swagger2markup.extensions.dynamicDefinitions.contentPath>${generated.asciidoc.directory}/extensions/definitions</swagger2markup.extensions.dynamicDefinitions.contentPath>
                                <swagger2markup.extensions.dynamicPaths.contentPath>${generated.asciidoc.directory}/extensions/paths</swagger2markup.extensions.dynamicPaths.contentPath>
                                <swagger2markup.extensions.dynamicSecurity.contentPath>${generated.asciidoc.directory}/extensions/security</swagger2markup.extensions.dynamicSecurity.contentPath>
                            </config>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>convertSwagger2markup</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Run the generated asciidoc through Asciidoctor to 
                        generate other documentation types, such as PDFs or HTML5 -->
                    <plugin>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctor-maven-plugin</artifactId>
                        <version>${asciidoctorj.version}</version>
                        <!-- Include Asciidoctor PDF for pdf generation -->
                        <dependencies>
                            <dependency>
                                <groupId>org.asciidoctor</groupId>
                                <artifactId>asciidoctorj-pdf</artifactId>
                                <version>1.5.0-alpha.10.1</version>
                            </dependency>
                            <!-- Comment this section to use the default 
                                jruby artifact provided by the plugin -->
                            <dependency>
                                <groupId>org.jruby</groupId>
                                <artifactId>jruby-complete</artifactId>
                                <version>${jruby.version}</version>
                            </dependency>
                            <!-- Comment this section to use the default 
                                AsciidoctorJ artifact provided by the plugin -->
                            <dependency>
                                <groupId>org.asciidoctor</groupId>
                                <artifactId>asciidoctorj</artifactId>
                                <version>${asciidoctorj.version}</version>
                            </dependency>

                        </dependencies>
                        <!-- Configure generic document generation settings -->
                        <configuration>
                            <sourceDirectory>${asciidoctor.input.directory}</sourceDirectory>
                            <sourceDocumentName>index.adoc</sourceDocumentName>
                            <attributes>
                                <doctype>book</doctype>
                                <toc>left</toc>
                                <toclevels>3</toclevels>
                                <numbered></numbered>
                                <hardbreaks></hardbreaks>
                                <sectlinks></sectlinks>
                                <sectanchors></sectanchors>
                                <generated>${generated.asciidoc.directory}</generated>
                            </attributes>
                        </configuration>
                        <!-- Since each execution can only handle one backend, 
                            run separate executions for each desired output type -->
                        <executions>
                            <execution>
                                <id>output-html</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>process-asciidoc</goal>
                                </goals>
                                <configuration>
                                    <backend>html5</backend>
                                    <outputDirectory>${asciidoctor.html.output.directory}</outputDirectory>
                                </configuration>
                            </execution>

                            <execution>
                                <id>output-pdf</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>process-asciidoc</goal>
                                </goals>
                                <configuration>
                                    <backend>pdf</backend>
                                    <outputDirectory>${asciidoctor.pdf.output.directory}</outputDirectory>
                                </configuration>
                            </execution>

                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>test</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <version>${spring-boot-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>pre-integration-test</id>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                                <configuration>
                                    <profiles>
                                        <profile>test</profile>
                                    </profiles>
                                </configuration>
                            </execution>
                            <execution>
                                <id>post-integration-test</id>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <executable>true</executable>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <configuration>
                            <includes>
                                <include>**/*IT.java</include>
                            </includes>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>sql-maven-plugin</artifactId>
                        <version>${sql-maven-plugin.version}</version>

                        <dependencies>
                            <!-- specify the dependent jdbc driver here -->
                            <dependency>
                                <groupId>org.postgresql</groupId>
                                <artifactId>postgresql</artifactId>
                                <version>${postgresql.version}</version>
                            </dependency>
                        </dependencies>

                        <!-- common configuration shared by all executions -->
                        <configuration>
                            <driver>org.postgresql.Driver</driver>
                            <url>jdbc:postgresql://localhost:5432/hrmstestdb</url>
                            <username>hrmsadm</username>
                            <password>hrmsadm</password>
                            <settingsKey>sensibleKey</settingsKey>
                            <onError>continue</onError>
                        </configuration>

                        <executions>
                            <execution>
                                <id>drop-db-before-test-if-any</id>
                                <phase>process-test-resources</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <url>jdbc:postgresql://localhost:5432/hrmsdb</url>
                                    <autocommit>true</autocommit>
                                    <sqlCommand>drop database if exists
                                        hrmstestdb</sqlCommand>
                                    <onError>continue</onError>
                                </configuration>
                            </execution>
                            <execution>
                                <id>create-db</id>
                                <phase>process-test-resources</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <url>jdbc:postgresql://localhost:5432/hrmsdb</url>
                                    <!-- no transaction -->
                                    <autocommit>true</autocommit>
                                    <sqlCommand>create database
                                        hrmstestdb</sqlCommand>
                                </configuration>
                            </execution>

                            <execution>
                                <id>create-schema</id>
                                <phase>process-test-resources</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <autocommit>true</autocommit>
                                    <sqlCommand>create schema HRMS</sqlCommand>
                                </configuration>
                            </execution>

                            <execution>
                                <id>create-data</id>
                                <phase>process-test-resources</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>


                                    <basedir>${basedir}</basedir>
                                    <srcFiles>
                                        <srcFile>../hua-setup/all_ddl.sql</srcFile>
                                        <srcFile>../hua-setup/all_baseline.sql</srcFile>
                                        <srcFile>../hua-setup/all_test_data.sql</srcFile>
                                    </srcFiles>

                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>com.btmatthews.maven.plugins</groupId>
                        <artifactId>ldap-maven-plugin</artifactId>
                        <version>${ldap-maven-plugin.version}</version>
                        <configuration>
                            <ldifFile>../hua-setup/hrms.ldif</ldifFile>
                            <ldapPort>11389</ldapPort>
                            <monitorPort>11388</monitorPort>
                            <monitorKey>ldap</monitorKey>
                            <daemon>true</daemon>
                            <rootDn>dc=example,dc=com</rootDn>
                            <serverType>apacheds</serverType>
                        </configuration>
                        <executions>
                            <execution>
                                <id>start-ldap</id>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <phase>pre-integration-test</phase>
                            </execution>
                            <execution>
                                <id>stop-ldap</id>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                                <phase>post-integration-test</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
